import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:vncovi/modules/vaccination/widgets/my_text_form_field.dart';
import 'package:vncovi/modules/vaccination/widgets/my_text_form_field_day.dart';
import 'package:vncovi/modules/vaccine/blocs/vaccine_provider.dart';
import 'package:vncovi/providers/log_provider.dart';
import 'package:vncovi/repository/vaccination_repo.dart';

class Vaccine extends StatefulWidget {
  const Vaccine({Key? key}) : super(key: key);

  @override
  _VaccineState createState() => _VaccineState();
}

class _VaccineState extends State<Vaccine> {
  late VaccineProvider _state;

  int currentStep = 0;
  bool isComplete = false;
  List<String> gender = ['Nam', 'N·ªØ', 'Kh√°c'];
  String genderController = '';
  TextEditingController nameController = TextEditingController();
  TextEditingController dobController = TextEditingController();
  TextEditingController phoneController = TextEditingController();
  TextEditingController cccdController = TextEditingController();
  TextEditingController bhytController = TextEditingController();
  List<String> ethnic = [
    'Kinh',
    'T√†y',
    'Th√°i',
    'M∆∞·ªùng',
    'Hoa',
    'Khmer',
    'N√πng',
    'HM√¥ng',
    'Dao',
    'Gia-rai',
    '√ä-ƒë√™',
    'Ba-na',
    'S√°n Chay',
    'ChƒÉm',
    'X√™-ƒëƒÉng',
    'S√°n D√¨u',
    'Hr√™',
    'C∆°-ho',
    'Ra Glay',
    "M'N√¥ng",
    'Th·ªï',
    'Xti√™ng',
    'Kh∆° M√∫',
    'Bru-V√¢n Ki·ªÅu',
    'Gi√°y',
    'C∆° tu',
    'Gi√©-Tri√™ng',
    'Ta √îi',
    'M·∫°',
    'Co',
    'Ch∆° Ro',
    'H√† Nh√¨',
    'Xinh Mun',
    'Chu-ru',
    'L√†o',
    'La Ch√≠',
    'Ph√π L√°',
    'La H·ªß',
    'Kh√°ng',
    'L∆∞',
    'P√† Th·∫ªn',
    'L√¥ L√¥',
    'Ch·ª©t',
    'M·∫£ng',
    'C·ªù lao',
    'B·ªë Y',
    'La Ha',
    'C·ªëng',
    'Ng√°i',
    'Si La',
    'Pu P√©o',
    'Br√¢u',
    'R∆° MƒÉm',
    '∆† ƒêu'
  ];
  String ethnicController = '';

  List<String> province = ['ƒê√† N·∫µng', 'Ph√∫ Y√™n', 'Qu·∫£ng Nam'];
  List<String> district = ['H·∫£i Ch√¢u', 'Ng≈© H√†nh S∆°n', 'C·∫©m L·ªá'];
  List<String> village = ['Ho√† H·∫£i', 'Ho√† Qu√Ω'];

  String villageController = '';
  String districtController = '';
  String provinceController = '';
  TextEditingController streetController = TextEditingController();

  List<String> occupation = [
    'K·ªπ s∆∞ ph·∫ßn m·ªÅm',
    'Ti·∫øp vi√™n h√†ng kh√¥ng',
    'B√°c sƒ©',
    'Qu√¢n ƒë·ªôi',
    'C√¥ng an',
    'Kh√°c'
  ];
  String occupationController = '';
  TextEditingController workplaceController = TextEditingController();

  List<String> injectionSession = [
    'Bu·ªïi s√°ng',
    'Bu·ªïi chi·ªÅu',
  ];
  String injectionSessionController = '';
  List<String> priorityGroup = [
    'Ng∆∞·ªùi l√†m vi·ªác trong c√°c ng√†nh y t·∫ø',
    'Ng∆∞·ªùi tham gia ph√≤ng ch·ªëng d·ªãch',
    'L·ª±c l∆∞·ª£ng Qu√¢n ƒë·ªôi',
    'L·ª±c l∆∞·ª£ng C√¥ng an',
    'Nh√¢n vi√™n, c√°n b·ªô ngo·∫°i giao c·ªßa Vi·ªát Nam v√† th√¢n nh√¢n ƒë∆∞·ª£c c·ª≠ ƒëi n∆∞·ªõc ngo√†i',
    'Ng∆∞·ªùi l√†m vi·ªác trong c√°c c∆° quan Ngo·∫°i giao, L√£nh s·ª±, c√°c t·ªï ch·ª©c qu·ªëc t·∫ø ho·∫°t ƒë·ªông t·∫°i Vi·ªát Nam',
  ];
  String injectionsController = '';
  String priorityGroupController = '';
  late final String? myPhone;
  late final String? myUid;

  @override
  void initState() {
    final FirebaseAuth auth = FirebaseAuth.instance;
    User? user = auth.currentUser;
    myPhone = user?.phoneNumber;
    myUid = user?.uid;
    const LogProvider('üì±').log(myPhone!);
    const LogProvider('üîí').log(myUid!);
    _state = VaccineProvider();
    super.initState();
    _state.getNameVaccine();
  }

  @override
  Widget build(BuildContext context) {
    print(myUid);
    return ChangeNotifierProvider<VaccineProvider>(
      create: (_) => _state,
      child: Consumer<VaccineProvider>(builder: (context, model, child) {
        List<Step> getSteps() => [
              Step(
                  title: const Text('Th√¥ng tin c√° nh√¢n'),
                  content: Column(
                    children: [
                      const SizedBox(
                        height: 10,
                      ),
                      MyTextFormField(
                        lableText: 'H·ªç v√† t√™n',
                        controller: nameController,
                      ),
                      const SizedBox(
                        height: 20,
                      ),
                      DropdownButtonFormField(
                        isExpanded: true,
                        decoration: InputDecoration(
                          labelText: 'Gi·ªõi t√≠nh',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10),
                            borderSide: const BorderSide(color: Colors.grey),
                            gapPadding: 5,
                          ),
                        ),
                        // value: dropdownValue,
                        items: gender
                            .map<DropdownMenuItem<String>>((String value) {
                          return DropdownMenuItem(
                            child: Text(value),
                            value: value,
                          );
                        }).toList(),
                        onChanged: (String? newValue) {
                          setState(() {
                            genderController = newValue!;
                          });
                        },
                      ),
                      const SizedBox(
                        height: 20,
                      ),
                      MyTextFormFieldDay(
                        lableText: 'Ng√†y sinh',
                        dobController: dobController,
                      ),
                      const SizedBox(
                        height: 20,
                      ),
                      MyTextFormField(
                        lableText: 'S·ªë ƒëi·ªán tho·∫°i',
                        controller: phoneController,
                        keyboardType: TextInputType.number,
                      ),
                      const SizedBox(
                        height: 20,
                      ),
                      MyTextFormField(
                        lableText: 'CCCD/CMND/H·ªô chi·∫øu',
                        controller: cccdController,
                        keyboardType: TextInputType.number,
                      ),
                      const SizedBox(
                        height: 20,
                      ),
                      MyTextFormField(
                        lableText: 'M√£ b·∫£o hi·ªÉm Y t·∫ø',
                        controller: bhytController,
                      ),
                      const SizedBox(
                        height: 20,
                      ),
                      DropdownButtonFormField(
                        isExpanded: true,
                        decoration: InputDecoration(
                          labelText: 'D√¢n t·ªôc',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10),
                            borderSide: const BorderSide(color: Colors.grey),
                            gapPadding: 5,
                          ),
                        ),
                        // value: dropdownValue,
                        items: ethnic
                            .map<DropdownMenuItem<String>>((String value) {
                          return DropdownMenuItem(
                            child: Text(value),
                            value: value,
                          );
                        }).toList(),
                        onChanged: (String? newValue) {
                          setState(() {
                            ethnicController = newValue!;
                          });
                        },
                      ),
                      const SizedBox(
                        height: 15,
                      ),
                    ],
                  ),
                  isActive: currentStep >= 0,
                  state:
                      currentStep > 0 ? StepState.complete : StepState.indexed),
              Step(
                  title: const Text('N∆°i c∆∞ tr√∫'),
                  content: Column(
                    children: [
                      const SizedBox(
                        height: 10,
                      ),
                      DropdownButtonFormField(
                        isExpanded: true,
                        decoration: InputDecoration(
                          labelText: 'T·ªânh/Th√†nh ph·ªë',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10),
                            borderSide: const BorderSide(color: Colors.grey),
                            gapPadding: 5,
                          ),
                        ),
                        // value: dropdownValue,
                        items: province
                            .map<DropdownMenuItem<String>>((String value) {
                          return DropdownMenuItem(
                            child: Text(value),
                            value: value,
                          );
                        }).toList(),
                        onChanged: (String? newValue) {
                          setState(() {
                            provinceController = newValue!;
                          });
                        },
                      ),
                      const SizedBox(
                        height: 20,
                      ),
                      DropdownButtonFormField(
                        isExpanded: true,
                        decoration: InputDecoration(
                          labelText: 'Qu·∫≠n/Huy·ªán',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10),
                            borderSide: const BorderSide(color: Colors.grey),
                            gapPadding: 5,
                          ),
                        ),
                        // value: dropdownValue,
                        items: district
                            .map<DropdownMenuItem<String>>((String value) {
                          return DropdownMenuItem(
                            child: Text(value),
                            value: value,
                          );
                        }).toList(),
                        onChanged: (String? newValue) {
                          setState(() {
                            districtController = newValue!;
                          });
                        },
                      ),
                      const SizedBox(
                        height: 20,
                      ),
                      DropdownButtonFormField(
                        isExpanded: true,
                        decoration: InputDecoration(
                          labelText: 'X√£/Ph∆∞·ªùng',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10),
                            borderSide: const BorderSide(color: Colors.grey),
                            gapPadding: 5,
                          ),
                        ),
                        // value: dropdownValue,
                        items: village
                            .map<DropdownMenuItem<String>>((String value) {
                          return DropdownMenuItem(
                            child: Text(value),
                            value: value,
                          );
                        }).toList(),
                        onChanged: (String? newValue) {
                          setState(() {
                            villageController = newValue!;
                          });
                        },
                      ),
                      const SizedBox(
                        height: 20,
                      ),
                      MyTextFormField(
                        controller: streetController,
                        lableText: 'ƒê∆∞·ªùng/S·ªë nh√†',
                        keyboardType: TextInputType.text,
                      ),
                      const SizedBox(
                        height: 15,
                      ),
                    ],
                  ),
                  isActive: currentStep >= 1,
                  state:
                      currentStep > 1 ? StepState.complete : StepState.indexed),
              Step(
                  title: const Text('Ngh·ªÅ nghi·ªáp'),
                  content: Column(
                    children: [
                      const SizedBox(
                        height: 10,
                      ),
                      DropdownButtonFormField(
                        isExpanded: true,
                        decoration: InputDecoration(
                          labelText: 'Nh√≥m ngh·ªÅ nghi·ªáp',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10),
                            borderSide: const BorderSide(color: Colors.grey),
                            gapPadding: 5,
                          ),
                        ),
                        // value: dropdownValue,
                        items: occupation
                            .map<DropdownMenuItem<String>>((String value) {
                          return DropdownMenuItem(
                            child: Text(value),
                            value: value,
                          );
                        }).toList(),
                        onChanged: (String? newValue) {
                          setState(() {
                            occupationController = newValue!;
                          });
                        },
                      ),
                      const SizedBox(
                        height: 20,
                      ),
                      MyTextFormField(
                        controller: workplaceController,
                        lableText: 'N∆°i l√†m vi·ªác',
                      ),
                      const SizedBox(
                        height: 15,
                      ),
                    ],
                  ),
                  isActive: currentStep >= 2,
                  state:
                      currentStep > 2 ? StepState.complete : StepState.indexed),
              Step(
                  title: const Text('Th√¥ng tin ƒëƒÉng k√Ω ti√™m Vaccine'),
                  content: Column(
                    children: [
                      const SizedBox(
                        height: 10,
                      ),
                      DropdownButtonFormField(
                        isExpanded: true,
                        decoration: InputDecoration(
                          labelText: 'Thu·ªëc ti√™m',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10),
                            borderSide: const BorderSide(color: Colors.grey),
                            gapPadding: 5,
                          ),
                        ),
                        // value: dropdownValue,
                        items: model.item!
                            .map<DropdownMenuItem<String>>((String value) {
                          return DropdownMenuItem(
                            child: Text(value),
                            value: value,
                          );
                        }).toList(),
                        onChanged: (String? newValue) {
                          setState(() {
                            model.setselected(newValue!);
                            model.getIdVaccine();
                            injectionsController = newValue;
                          });
                          print(model.idVaccine);
                        },
                      ),
                      const SizedBox(
                        height: 20,
                      ),
                      DropdownButtonFormField(
                        isExpanded: true,
                        decoration: InputDecoration(
                          labelText: 'Bu·ªïi ti√™m',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10),
                            borderSide: const BorderSide(color: Colors.grey),
                            gapPadding: 5,
                          ),
                        ),
                        // value: dropdownValue,
                        items: injectionSession
                            .map<DropdownMenuItem<String>>((String value) {
                          return DropdownMenuItem(
                            child: Text(value),
                            value: value,
                          );
                        }).toList(),
                        onChanged: (String? newValue) {
                          setState(() {
                            injectionSessionController = newValue!;
                          });
                        },
                      ),
                      const SizedBox(
                        height: 20,
                      ),
                      DropdownButtonFormField(
                        isExpanded: true,
                        decoration: InputDecoration(
                          labelText: 'Nh√≥m ∆∞u ti√™n',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10),
                            borderSide: const BorderSide(color: Colors.grey),
                            gapPadding: 5,
                          ),
                        ),
                        // value: dropdownValue,
                        items: priorityGroup
                            .map<DropdownMenuItem<String>>((String value) {
                          return DropdownMenuItem(
                            child: Text(value),
                            value: value,
                          );
                        }).toList(),
                        onChanged: (String? newValue) {
                          setState(() {
                            priorityGroupController = newValue!;
                          });
                        },
                      ),
                      const SizedBox(
                        height: 15,
                      ),
                    ],
                  ),
                  isActive: currentStep >= 2,
                  state:
                      currentStep > 2 ? StepState.complete : StepState.indexed),
            ];
        final isLastStep = currentStep == getSteps().length - 1;
        return Stepper(
          steps: getSteps(),
          type: StepperType.vertical,
          currentStep: currentStep,
          onStepContinue: () async {
            print(nameController.text);
            print(genderController);
            if (isLastStep) {
              String name = nameController.text;
              String gender = genderController;
              String dob = dobController.text;
              String phone = phoneController.text;
              String cccd = cccdController.text;
              String bhyt = bhytController.text;
              String ethnic = ethnicController;
              String address = streetController.text +
                  ' - ' +
                  villageController +
                  ' - ' +
                  districtController +
                  ' - ' +
                  provinceController;
              String workplace = workplaceController.text;
              await VaccinationRepo()
                  .postData(
                      name,
                      gender,
                      dob,
                      phone,
                      cccd,
                      bhyt,
                      address,
                      occupationController,
                      workplace,
                      ethnic,
                      injectionsController,
                      injectionSessionController,
                      priorityGroupController,
                      myUid!,
                      model.idVaccine)
                  .then((value) => print(value));
            } else {
              setState(() {
                currentStep += 1;
              });
            }
          },
          onStepCancel: () {
            currentStep == 0
                ? null
                : setState(() {
                    currentStep -= 1;
                  });
          },
          onStepTapped: (step) => setState(
            () {
              currentStep = step;
            },
          ),
          controlsBuilder: (context, details) {
            return SizedBox(
              child: Row(
                children: [
                  Expanded(
                    child: ElevatedButton(
                      child: Text(isLastStep ? 'ƒêƒÉng k√Ω ti√™m' : 'Ti·∫øp'),
                      onPressed: details.onStepContinue,
                    ),
                  ),
                  const SizedBox(
                    width: 12,
                  ),
                  if (currentStep != 0)
                    Expanded(
                      child: ElevatedButton(
                        child: const Text('Quay l·∫°i'),
                        onPressed: details.onStepCancel,
                      ),
                    ),
                ],
              ),
            );
          },
        );
      }),
    );
  }
}
